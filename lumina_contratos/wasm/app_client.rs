// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct AppFactory<R> {
    #[allow(dead_code)]
    remoting: R,
}
impl<R> AppFactory<R> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::AppFactory for AppFactory<R> {
    type Args = R::Args;
    fn new(&self) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, app_factory::io::New>::new(self.remoting.clone(), ())
    }
}

pub mod app_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct New(());
        impl New {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <New as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
            type Params = ();
            type Reply = ();
        }
    }
}
pub struct CreditRequest<R> {
    remoting: R,
}
impl<R> CreditRequest<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::CreditRequest for CreditRequest<R> {
    type Args = R::Args;
    fn request_credit(
        &mut self,
        amount_requested: u32,
        collateral: u32,
        purpose: Purpose,
        time_to_pay: TimeToPay,
    ) -> impl Call<Output = CreditRequestEvent, Args = R::Args> {
        RemotingAction::<_, credit_request::io::RequestCredit>::new(
            self.remoting.clone(),
            (amount_requested, collateral, purpose, time_to_pay),
        )
    }
    fn get_requests(&self) -> impl Query<Output = IoCreditRequestState, Args = R::Args> {
        RemotingAction::<_, credit_request::io::GetRequests>::new(self.remoting.clone(), ())
    }
}

pub mod credit_request {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct RequestCredit(());
        impl RequestCredit {
            #[allow(dead_code)]
            pub fn encode_call(
                amount_requested: u32,
                collateral: u32,
                purpose: super::Purpose,
                time_to_pay: super::TimeToPay,
            ) -> Vec<u8> {
                <RequestCredit as ActionIo>::encode_call(&(
                    amount_requested,
                    collateral,
                    purpose,
                    time_to_pay,
                ))
            }
        }
        impl ActionIo for RequestCredit {
            const ROUTE: &'static [u8] = &[
                52, 67, 114, 101, 100, 105, 116, 82, 101, 113, 117, 101, 115, 116, 52, 82, 101,
                113, 117, 101, 115, 116, 67, 114, 101, 100, 105, 116,
            ];
            type Params = (u32, u32, super::Purpose, super::TimeToPay);
            type Reply = super::CreditRequestEvent;
        }
        pub struct GetRequests(());
        impl GetRequests {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <GetRequests as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for GetRequests {
            const ROUTE: &'static [u8] = &[
                52, 67, 114, 101, 100, 105, 116, 82, 101, 113, 117, 101, 115, 116, 44, 71, 101,
                116, 82, 101, 113, 117, 101, 115, 116, 115,
            ];
            type Params = ();
            type Reply = super::IoCreditRequestState;
        }
    }
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum Purpose {
    P0,
    P1,
    P2,
    P3,
    P4,
    P5,
    P6,
    P7,
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum TimeToPay {
    T0,
    T1,
    T2,
    T3,
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum CreditRequestEvent {
    Success,
    CollateralTooLow,
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct IoCreditRequestState {
    pub all_requests: Vec<(ActorId, (u32, u32, Purpose, TimeToPay))>,
}

pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait AppFactory {
        type Args;
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self) -> impl Activation<Args = Self::Args>;
    }

    #[allow(clippy::type_complexity)]
    pub trait CreditRequest {
        type Args;
        fn request_credit(
            &mut self,
            amount_requested: u32,
            collateral: u32,
            purpose: Purpose,
            time_to_pay: TimeToPay,
        ) -> impl Call<Output = CreditRequestEvent, Args = Self::Args>;
        fn get_requests(&self) -> impl Query<Output = IoCreditRequestState, Args = Self::Args>;
    }
}
